from tkinter import *
from tkinter import messagebox
from PIL import ImageTk, Image
import tkinter as tk
import pymysql
import threading
from sandbox_model import arbitrary
from classification import arbit
from cuckooReportParser import parser
from tkinter import filedialog
from Feature_Extraction import arbiting

try: import tkinter
except ImportError:
    import Tkinter as tkinter
    import ttk
else: from tkinter import ttk


# ---------------------------------------------------------------Login Function --------------------------------------

def close():
        win.destroy()


def login():
    if user_name.get() == "" or password.get() == "":
        messagebox.showerror("Error", "Enter User Name And Password", parent=win)
    else:
        try:
            con = pymysql.connect(host="localhost", user="root", password="", database="fyp")
            cur = con.cursor()

            cur.execute("select * from user where user_name = %s and password = %s",
                        (user_name.get(), password.get()))
            row = cur.fetchone()

            if row == None:
                messagebox.showerror("Error", "Invalid User Name And Password", parent=win)

            else:
                messagebox.showinfo("Success", "Successfully Login", parent=win)
                close()
                dashboard()
            con.close()
        except Exception as es:
            messagebox.showerror("Error", f"Error Due to : {str(es)}", parent=win)


# ---------------------------------------------------------------End Login Function ---------------------------------

# ---------------------------------------------------- DashBoard Panel -----------------------------------------

def dashboard():

 win = Tk()
 win.title('Malware Detection')
 win.geometry('530x550')
 win.resizable(False, False)
 win.configure(background="#272736")
 win.iconbitmap('images/icon.ico')
 img = Image.open('images/pic.png')
 win.tkimage = ImageTk.PhotoImage(img)
 Label(win, image=win.tkimage, bg="#272736").place(x=-10, y=-120, relwidth=1, relheight=1)
 malware_btn = Button(win, text='Detect Malware', width=14, bg='grey', fg='black', command=Malware_Detection)
 malware_btn.place(x=100, y=420)
 classify_btn = Button(win, text='Classification', width=14, bg='grey', fg='black', command=Malware_Classification)
 classify_btn.place(x=330, y=420 )
 feature_btn = Button(win, text='Feature Extraction', width=14, bg='grey', fg='black', command=Malware_Features)
 feature_btn.place(x=330, y=320 )
 btn = Button(win, text='Preprocessing', width=14, bg='grey', fg='black', command=report_parser)
 btn.place(x=100, y=320 )

 Logout_btn = Button(win, text='Logout', width=8, bg='grey', fg='black', command=exit)
 Logout_btn.place(x=240, y=510)



# -----------------------------------------------------End Deshboard Panel ---------------------------------
# ----------------------------------------------------Feature Extraction -----------------------------------
class Malware_Features(object):
    def __init__(self):
        self.root = tkinter.Tk()
        self.root.geometry('320x220')
        self.root.resizable(False, False)
        self.root.configure(background="#272736")
        self.root.iconbitmap('images/icon.ico')
        self.root.title('Features Extraction')
        self.root.grid()

        self.progbar = ttk.Progressbar(self.root, length=250)
        self.progbar.config(maximum=10, mode='indeterminate')
        self.progbar.place(x=35, y=100)

        self.b_start = ttk.Button(self.root, text='Extract')
        self.b_start['command'] = self.start_thread
        self.b_start.place(x=125, y=160)

    def start_thread(self):
        self.b_start['state'] = 'Disable'
        self.progbar.start()
        self.secondary_thread = threading.Thread(target=arbiting)
        self.secondary_thread.start()
        self.root.after(50, self.check_thread)

    def check_thread(self):
        if self.secondary_thread.is_alive():
            self.root.after(50, self.check_thread)
        else:
            self.progbar.stop()
            self.b_start['state'] = 'normal'

#----------------------------------------------------End Feature Extraction -----------------------------------
# -----------------------------------------------------Malware Detection -----------------------------------
class Malware_Detection(object):
    def __init__(self):

        self.root = tkinter.Tk()
        self.root.geometry('320x220')
        self.root.resizable(False, False)
        self.root.configure(background="#272736")
        self.root.iconbitmap('images/icon.ico')
        self.root.title('Malware Detection')
        self.root.grid()

        self.progbar = ttk.Progressbar(self.root, length=250)
        self.progbar.config(maximum=10, mode='indeterminate')
        self.progbar.place(x=35, y=100)

        self.b_start = ttk.Button(master=self.root, text='Detect')
        self.b_start['command'] = self.start_thread
        self.b_start.place(x=180, y=160)

        self.broButton = tk.Button(master=self.root, text='Browse',bg='lightgrey', width=10, command=self.browse_file)
        self.broButton.place(x=70, y=160)

    def browse_file(self):
        self.fname = filedialog.askopenfilename(
            initialdir="C:\\Users\\Aamir\\PycharmProjects\\MalwareDetection\\dataset",
            filetypes=(("CSV files", "*.CSV"), ("All files", "*")))
        print(self.fname)

    def start_thread(self):
            self.b_start['state'] = 'Disable'
            self.progbar.start()
            self.secondary_thread = threading.Thread(target=arbitrary)
            self.secondary_thread.start()
            self.root.after(50, self.check_thread)

    def check_thread(self):
            if self.secondary_thread.is_alive():
                self.root.after(50, self.check_thread)
            else:
                self.progbar.stop()
                self.b_start['state'] = 'normal'
# -----------------------------------------------------End Malware Detection -----------------------------------
# -----------------------------------------------------Malware Classification ----------------------------------

class Malware_Classification(object):
    def __init__(self):

        self.root = tkinter.Tk()
        self.root.geometry('320x220')
        self.root.resizable(False, False)
        self.root.configure(background="#272736")
        self.root.iconbitmap('images/icon.ico')
        self.root.title('Malware Classification')
        self.root.grid()

        self.progbar = ttk.Progressbar(self.root, length=250)
        self.progbar.config(maximum=10, mode='indeterminate')
        self.progbar.place(x=35, y=100)

        self.b_start = ttk.Button(self.root, text='Classify')
        self.b_start['command'] = self.start_thread
        self.b_start.place(x=180, y=160)
        self.broButton = tk.Button(master=self.root, text='Browse', bg='lightgrey', width=10, command=self.browse_file)
        self.broButton.place(x=70, y=160)

    def browse_file(self):
        self.fname = filedialog.askopenfilename(
            initialdir="C:\\Users\\Aamir\\PycharmProjects\\MalwareDetection\\dataset",
            filetypes=(("CSV files", "*.CSV"), ("All files", "*")))
        print(self.fname)

    def start_thread(self):
        self.b_start['state'] = 'Disable'
        self.progbar.start()
        self.secondary_thread = threading.Thread(target=arbit)
        self.secondary_thread.start()
        self.root.after(50, self.check_thread)

    def check_thread(self):
        if self.secondary_thread.is_alive():
            self.root.after(50, self.check_thread)
        else:
            self.progbar.stop()
            self.b_start['state'] = 'normal'


# -----------------------------------------------------End Malware Classification ------------------------------
def report_parser():
    filename = filedialog.askopenfilename(
        initialdir="C:\\Users\\Aamir\\PycharmProjects\\MalwareDetection\\CuckooReportParser\\json-reports", multiple=True)

    parser(filename)

# ----------------------------------------------------------- Signup Window ------------------------------------


def signup():
    # signup database connect
    def action():
        if name.get() == "" or user_name.get() == "" or email.get() == "" or password.get() == "" or very_pass.get() == "":
            messagebox.showerror("Error", "All Fields Are Required", parent=win)
        elif password.get() != very_pass.get():
            messagebox.showerror("Error", "Password & Confirm Password Should Be Same", parent=win)
        else:
            try:
                con = pymysql.connect(host="localhost", user="root", password="", database="fyp")
                cur = con.cursor()
                cur.execute("select * from user where user_name=%s", user_name.get())
                row = cur.fetchone()
                if row != None:
                    messagebox.showerror("Error", "User Name Already Exits", parent=win)
                else:
                    cur.execute(
                        "insert into user(name,user_name,email,password) values(%s,%s,%s,%s)",
                        (
                            name.get(),
                            user_name.get(),
                            email.get(),
                            password.get()
                        ))
                    con.commit()
                    con.close()
                    messagebox.showinfo("Success", "Ragistration Successfull", parent=win)
                    switch()

            except Exception as es:
                messagebox.showerror("Error", f"Error Due to : {str(es)}", parent=win)

    # close signup function
    def switch():
        winsignup.destroy()

    # start Signup Window

    winsignup = Tk()
    winsignup.title("Malware Detecton")
    winsignup.resizable(False, False)
    winsignup.geometry("500x500")
    winsignup.configure(background="#272736")
    winsignup.iconbitmap('images/icon.ico')
    # heading label
    heading = Label(winsignup, text="Signup Here", width=20, font=("bold", 20), bg="#272736", fg='grey')
    heading.place(x=90, y=50)

    # form data label
    first_name = Label(winsignup, text="Name", width=20, font=("bold", 10), bg="#272736", fg='grey')
    first_name.place(x=65, y=130)

    last_name = Label(winsignup, text="UserName", width=20, font=("bold", 10), bg="#272736", fg='grey')
    last_name.place(x=65, y=170)

    user_name = Label(winsignup, text="Email", width=20, font=("bold", 10), bg="#272736", fg='grey')
    user_name.place(x=65, y=210)

    password = Label(winsignup, text="Password", width=20, font=("bold", 10), bg="#272736", fg='grey')
    password.place(x=65, y=250)

    very_pass = Label(winsignup, text="Confirm-Password", width=20, font=("bold", 10), bg="#272736", fg='grey')
    very_pass.place(x=65, y=290)

    # Entry Box ------------------------------------------------------------------

    name = StringVar()
    user_name = StringVar()
    email = StringVar()
    password = StringVar()
    very_pass = StringVar()

    name = Entry(winsignup, width=20, textvariable=name)
    name.place(x=230, y=130)

    user_name = Entry(winsignup, width=20, textvariable=user_name)
    user_name.place(x=230, y=170)

    email = Entry(winsignup, width=20, textvariable=email)
    email.place(x=230, y=210)

    password = Entry(winsignup, width=20, show="*", textvariable=password)
    password.place(x=230, y=250)

    very_pass = Entry(winsignup, width=20, show="*", textvariable=very_pass)
    very_pass.place(x=230, y=290)

    # button login

    btn_signup = Button(winsignup, text='Submit', width=8, bg='grey', fg='black', command=action)
    btn_signup.place(x=190, y=370)

    login_btn = Button(winsignup, text='Login', width=8, bg='grey', fg='black', command=switch)
    login_btn.place(x=280, y=370)

    winsignup.mainloop()


# ---------------------------------------------------------------------------End Singup Window------------------------


# ------------------------------------------------------------ Login Window -----------------------------------------

win = Tk()
win.title("Malware Detection")
win.geometry("500x500")
win.resizable(False, False)
win.configure(background="#272736")
win.iconbitmap('images/icon.ico')

# heading label
heading = Label(win, text="Login Here", width=20, font=("bold", 20), bg="#272736", fg='grey')
heading.place(x=90, y=100)

username = Label(win, text="UserName", width=20, font=("bold", 10), bg="#272736", fg='grey')
username.place(x=80, y=200)

userpass = Label(win, text="Password", width=20, font=("bold", 10), bg="#272736", fg='grey')
userpass.place(x=80, y=250)

# Entry Box
user_name = StringVar()
password = StringVar()

userentry = Entry(win, width=20, textvariable=user_name)
userentry.focus()
userentry.place(x=220, y=200)

passentry = Entry(win, width=20, show="*", textvariable=password)
passentry.place(x=220, y=250)

# button login

btn_login = Button(win,text='Login', width=8, bg='grey', command=login)
btn_login.place(x=190, y=300)

# signup button

sign_up_btn = Button(win, text='Signup', width=8, bg='grey',  command=signup)
sign_up_btn.place(x=280, y=300)

win.mainloop()

# -------------------------------------------------------------------------- End Login Window ------------------------
